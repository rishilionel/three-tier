spring.application.name=learning

server.port=80

spring.datasource.url=jdbc:postgresql://psql-three-tier.postgres.database.azure.com:5432/book
spring.datasource.username=Rishi
spring.datasource.password=Password@123
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#spring.jpa.properties.javax.persistence.schema-generation.database.action=none
spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata

spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.database.action=drop-and-create
spring.jpa.properties.javax.persistence.schema-generation.database.action=update
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=my-schema_init.sql
spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=my-schema_drop.sql
spring.jpa.properties.hibernate.default_schema=public
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

spring.flyway.enabled=false
spring.jpa.hibernate.ddl-auto=validate
#logging.level.org.hibernate.SQL=debug

#docker run -p 80:80 -itd -e SPRING_DATASOURCE_URL="jdbc:postgresql://postgres-three-tier.postgres.database.azure.com:5432/postgres" -e SPRING_DATASOURCE_USERNAME="Postgres" -e SPRING_DATASOURCE_PASSWORD="Password@123" -e SERVER_PORT="80" acrthreetier.azurecr.io/backend

# curl -X POST -H "Content-Type: application/json" -d '{
#     "id": "2",
#     "name": "book-1",
#     "author": "surya",
#     "price": 25.00,
#     "yearOfPublication": "2025"
#   }' http://localhost:80/api/v1/book/add
